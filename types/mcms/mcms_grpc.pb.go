// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: mcms.proto

package mcms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mcms_InitDatabase_FullMethodName    = "/mcms.Mcms/initDatabase"
	Mcms_SendEmail_FullMethodName       = "/mcms.Mcms/sendEmail"
	Mcms_CreateEmailLog_FullMethodName  = "/mcms.Mcms/createEmailLog"
	Mcms_UpdateEmailLog_FullMethodName  = "/mcms.Mcms/updateEmailLog"
	Mcms_GetEmailLogList_FullMethodName = "/mcms.Mcms/getEmailLogList"
	Mcms_GetEmailLogById_FullMethodName = "/mcms.Mcms/getEmailLogById"
	Mcms_DeleteEmailLog_FullMethodName  = "/mcms.Mcms/deleteEmailLog"
)

// McmsClient is the client API for Mcms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McmsClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
	// group: email
	SendEmail(ctx context.Context, in *EmailInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// EmailLog management
	// group: emaillog
	CreateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
	// group: emaillog
	UpdateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseResp, error)
	// group: emaillog
	GetEmailLogList(ctx context.Context, in *EmailLogListReq, opts ...grpc.CallOption) (*EmailLogListResp, error)
	// group: emaillog
	GetEmailLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*EmailLogInfo, error)
	// group: emaillog
	DeleteEmailLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
}

type mcmsClient struct {
	cc grpc.ClientConnInterface
}

func NewMcmsClient(cc grpc.ClientConnInterface) McmsClient {
	return &mcmsClient{cc}
}

func (c *mcmsClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mcms_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcmsClient) SendEmail(ctx context.Context, in *EmailInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Mcms_SendEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcmsClient) CreateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	out := new(BaseUUIDResp)
	err := c.cc.Invoke(ctx, Mcms_CreateEmailLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcmsClient) UpdateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mcms_UpdateEmailLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcmsClient) GetEmailLogList(ctx context.Context, in *EmailLogListReq, opts ...grpc.CallOption) (*EmailLogListResp, error) {
	out := new(EmailLogListResp)
	err := c.cc.Invoke(ctx, Mcms_GetEmailLogList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcmsClient) GetEmailLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*EmailLogInfo, error) {
	out := new(EmailLogInfo)
	err := c.cc.Invoke(ctx, Mcms_GetEmailLogById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcmsClient) DeleteEmailLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mcms_DeleteEmailLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McmsServer is the server API for Mcms service.
// All implementations must embed UnimplementedMcmsServer
// for forward compatibility
type McmsServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	// group: email
	SendEmail(context.Context, *EmailInfo) (*BaseUUIDResp, error)
	// EmailLog management
	// group: emaillog
	CreateEmailLog(context.Context, *EmailLogInfo) (*BaseUUIDResp, error)
	// group: emaillog
	UpdateEmailLog(context.Context, *EmailLogInfo) (*BaseResp, error)
	// group: emaillog
	GetEmailLogList(context.Context, *EmailLogListReq) (*EmailLogListResp, error)
	// group: emaillog
	GetEmailLogById(context.Context, *UUIDReq) (*EmailLogInfo, error)
	// group: emaillog
	DeleteEmailLog(context.Context, *UUIDsReq) (*BaseResp, error)
	mustEmbedUnimplementedMcmsServer()
}

// UnimplementedMcmsServer must be embedded to have forward compatible implementations.
type UnimplementedMcmsServer struct {
}

func (UnimplementedMcmsServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedMcmsServer) SendEmail(context.Context, *EmailInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedMcmsServer) CreateEmailLog(context.Context, *EmailLogInfo) (*BaseUUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailLog not implemented")
}
func (UnimplementedMcmsServer) UpdateEmailLog(context.Context, *EmailLogInfo) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailLog not implemented")
}
func (UnimplementedMcmsServer) GetEmailLogList(context.Context, *EmailLogListReq) (*EmailLogListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailLogList not implemented")
}
func (UnimplementedMcmsServer) GetEmailLogById(context.Context, *UUIDReq) (*EmailLogInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailLogById not implemented")
}
func (UnimplementedMcmsServer) DeleteEmailLog(context.Context, *UUIDsReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmailLog not implemented")
}
func (UnimplementedMcmsServer) mustEmbedUnimplementedMcmsServer() {}

// UnsafeMcmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McmsServer will
// result in compilation errors.
type UnsafeMcmsServer interface {
	mustEmbedUnimplementedMcmsServer()
}

func RegisterMcmsServer(s grpc.ServiceRegistrar, srv McmsServer) {
	s.RegisterService(&Mcms_ServiceDesc, srv)
}

func _Mcms_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcms_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_SendEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).SendEmail(ctx, req.(*EmailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcms_CreateEmailLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLogInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).CreateEmailLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_CreateEmailLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).CreateEmailLog(ctx, req.(*EmailLogInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcms_UpdateEmailLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLogInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).UpdateEmailLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_UpdateEmailLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).UpdateEmailLog(ctx, req.(*EmailLogInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcms_GetEmailLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailLogListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).GetEmailLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_GetEmailLogList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).GetEmailLogList(ctx, req.(*EmailLogListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcms_GetEmailLogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).GetEmailLogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_GetEmailLogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).GetEmailLogById(ctx, req.(*UUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mcms_DeleteEmailLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).DeleteEmailLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_DeleteEmailLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).DeleteEmailLog(ctx, req.(*UUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Mcms_ServiceDesc is the grpc.ServiceDesc for Mcms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mcms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcms.Mcms",
	HandlerType: (*McmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Mcms_InitDatabase_Handler,
		},
		{
			MethodName: "sendEmail",
			Handler:    _Mcms_SendEmail_Handler,
		},
		{
			MethodName: "createEmailLog",
			Handler:    _Mcms_CreateEmailLog_Handler,
		},
		{
			MethodName: "updateEmailLog",
			Handler:    _Mcms_UpdateEmailLog_Handler,
		},
		{
			MethodName: "getEmailLogList",
			Handler:    _Mcms_GetEmailLogList_Handler,
		},
		{
			MethodName: "getEmailLogById",
			Handler:    _Mcms_GetEmailLogById_Handler,
		},
		{
			MethodName: "deleteEmailLog",
			Handler:    _Mcms_DeleteEmailLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcms.proto",
}

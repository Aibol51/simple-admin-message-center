// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: mcms.proto

package mcms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mcms_InitDatabase_FullMethodName = "/mcms.Mcms/initDatabase"
)

// McmsClient is the client API for Mcms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McmsClient interface {
	// group: base
	InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
}

type mcmsClient struct {
	cc grpc.ClientConnInterface
}

func NewMcmsClient(cc grpc.ClientConnInterface) McmsClient {
	return &mcmsClient{cc}
}

func (c *mcmsClient) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, Mcms_InitDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McmsServer is the server API for Mcms service.
// All implementations must embed UnimplementedMcmsServer
// for forward compatibility
type McmsServer interface {
	// group: base
	InitDatabase(context.Context, *Empty) (*BaseResp, error)
	mustEmbedUnimplementedMcmsServer()
}

// UnimplementedMcmsServer must be embedded to have forward compatible implementations.
type UnimplementedMcmsServer struct {
}

func (UnimplementedMcmsServer) InitDatabase(context.Context, *Empty) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDatabase not implemented")
}
func (UnimplementedMcmsServer) mustEmbedUnimplementedMcmsServer() {}

// UnsafeMcmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McmsServer will
// result in compilation errors.
type UnsafeMcmsServer interface {
	mustEmbedUnimplementedMcmsServer()
}

func RegisterMcmsServer(s grpc.ServiceRegistrar, srv McmsServer) {
	s.RegisterService(&Mcms_ServiceDesc, srv)
}

func _Mcms_InitDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McmsServer).InitDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mcms_InitDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McmsServer).InitDatabase(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Mcms_ServiceDesc is the grpc.ServiceDesc for Mcms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mcms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mcms.Mcms",
	HandlerType: (*McmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "initDatabase",
			Handler:    _Mcms_InitDatabase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mcms.proto",
}
